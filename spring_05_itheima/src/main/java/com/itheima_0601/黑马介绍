-----------------------------------------------------------------------------
itheima_0601:Spring中的新注解
 * 一、@Configuration
 *     作用：指定当前类是一个配置类
 *     细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写。
 *
 * 二、@ComponentScan
 *     作用：用于通过注解指定spring在创建容器时要扫描的包
 *     属性：
 *          value:它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包
 *              我们使用此注解就等同于xml中配置了
 *                      <context:component-scan base-package="com.itheima_0504"></context:component-scan>
 *
 * 三、@Bean
 *     作用：用于把当前的方法的返回值作为bean对象存入spring的ioc容器中
 *     属性：
 *          name：用于指定bean的id，默认值是当不写value时，是当前方法的名称
 *     细节：
 *          当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象
 *          查找的方法和Autowired注解的作用是一样的
 *
 * 四、@import
 *     作用：用于导入其他的配置类
 *     属性：
 *          value:用于指定其他配置类的字节码
 *                当我们使用Import的注解后，有Import注解的类就是父配置类，而导入的都是子配置类
 * 五、@PropertySource
 *     作用：用于指定properties文件的位置
 *     属性：
 *          value：指定文件的名称和路径
 *                 关键字：classpath，表示类路径下
 *
 * 六、spring的整合：
 *   //方法一：
 *   //    private ApplicationContext ac;
 *   //    private IAccountService as;
 *
 *   //    @Before
 *   //    public void init(){
 *   //        ac = new AnnotationConfigApplicationContext(SpringConfiguration.class);
 *   //        as = ac.getBean("accountService",IAccountService.class);
 *   //    }
 *
 *   //方法二： spring整合junit的配置 -------推荐使用
 *   //    1、导入spring整合junit的jar坐标--spring-test
 *   //    2、使用junit提供的注解把原有的main方法替换，替换成spring提供的
 *   //          @RunWith(SpringJUnit4ClassRunner.class)
 *   //    3、告知spring的运行器，spring的ioc创建时基于xml还是注解的，并且说明位置
 *   //            @ContextConfiguration()
     //                location:指定xml文件的位置，加上classpath关键字，表示在类路径下
     //                classes：指定注解类所在位置
     //    当我们使用spring 5版本的时候，要求junit的jar必须是4.12及以上

     //方法错误展示：
     //    @Autowired
     //    private ApplicationContext ac =null;
     //    解释：
     //    1、应用程序的入口：main方法
     //    2、junit单元测试中，没有main方法也能执行
     //        junit集成了一个main方法
     //            该方法就会判断当前测试类中哪些方法有 @Test注解
     //            junit就让有Test注解的方法执行
     //    3、junit不会管我们是否采用spring框架
     //           在执行测试方法的时候，junit根本不知道我们是不是是用来了spring框架
     //           所以也就不会为我们读取配置文件/配置类创建spring核心容器
     //    4、当测试方法执行时，没有ioc容器，就算写了AutoWired注解，也无法实现
