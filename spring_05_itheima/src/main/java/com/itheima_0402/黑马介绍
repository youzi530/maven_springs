黑马教程：

-------------------------------------------------------------------
spring_01_Demo
一、耦合：程序之间的依赖关系
        ·类之间的依赖
            ·第一步：使用反射来创建对象，而避免使用new关键字
            ·第二步：通过读取配置文件来获取要创建的对象全限定类名
        ·方法之间的依赖
    解耦：降低程序之间的依赖关系
    注意：编译期不依赖，运行时才依赖
    例子：sevlet层调用service层，service层调用dao层，耦合度极高
    操作：
        新建一个完整的servlet的项目构建的maven项目，不包括factory，然后运行ui里面的Client

二、Bean:可重用的组件
    javabean：用java编写的可重用的组件  javabean != 实体类

    解决方式：
    第一个：需要一个配置文件来配置我们的service和dao
        配置的内容：唯一标识key-value（两种）全限定类名
        ·xml（spring的时候用）
        ·properties(建议使用，简单)
    第二个：通过读取配置文件中的配置内容，反射创建对象

    操作：
        新建hiemabean.properties
        新建BeanFactory类，里面写
三、单例与多例
    ·servlet是单例；只被创建一次

    ·bean = Class.forName(beanPath).newInstance();则是多例的
四、其实呢，就是与其用new的方式来确定两个对象的关系时候，我们采取一种更加高效的方式来降低陈序的耦合度
    就是新建一个工厂来充当中介的角色来确定关系，削减程序的耦合度，不能完全的消除

五、接下来学习spring中的ioc，上面学习只是降低我们程序的耦合度，用的是我们自己的方式


-----------------------------------------------------------------------------------------------------------
spring_02_Demo
一、使用spring的ioc做准备
    ·新建itheimabean.xml文件
    ·修改Client类中的内容

二、ApplicationContext的三个常用实现类
    ·ClassPathXmlApplicationContext
        加载类路径下的配置文件，要求配置文件必须在类路径下
        ApplicationContext ac = new ClassPathXmlApplicationContext("itheimabean.xml");
    ·FileSystemXmlApplicationContext
        加载磁盘下的任意路径下的配置文件（必须有访问权限）
        ApplicationContext ac = new FileSystemXmlApplicationContext("F:\\study\\java\\IdeaProjects\\maven_spring\\spring_02_Demo\\src\\main\\resources\\itheimabean.xml");
    ·AnnotationConfigApplicationContext
        用于读取注解创建容器的

三、核心容器两个接口引发的问题：
    ·ApplicationContext:(单例对象适用)
        他在构建核心容器的时候，创建对象采取的策略是采取立即加载的方式，也就是说，只要一读取配置文件马上就创建配置文件中配置的对象。
        ApplicationContext ac = new ClassPathXmlApplicationContext("itheimabean.xml");
        IAccountService as = (IAccountService) ac.getBean("accountService");
        IAccountDao adao = ac.getBean("accountDao", IAccountDao.class);
    ·BeanFactory:(多例对象适用)
        他在构建核心容器的时候，创建对象采取的策略是采用延迟加载的方式，也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象。
        Resource resource = new ClassPathResource("itheimabean.xml");
        BeanFactory factory = new XmlBeanFactory(resource);
        IAccountService as = (IAccountService) factory.getBean("accountService");


-----------------------------------------------------------------------------------------------------------
spring_03_Demo
一、spring对bean的管理细节

    ·1、创建bean的三种方式（参考itheima.xml）
        ·第一种：使用默认构造函数创建--在spring配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。
            采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。
        ·第二种：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
        ·第三种：使用静态工厂中的静态方法创建对象，使用某个类中的静态方法创建对象，并存入spring容器中

    ·2、bean的作用范围
        bean（默认为单例）的scope属性：
            ·作用：用于指定bean的作用范围
            ·取值：
                singleton:默认为单例
                prototype：多例的  scope="prototype"
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，他就是session

    ·3、bean对象的生命周期
        ·单例对象--立即
            出生：当容器创建时对象出生
            活着：只要容器还在，对象一直活着
            死亡：容器销毁，对象消亡
        ·多例对象--延迟
            出生：当使用对象时，spring框架为我们创建
            活着：对象只要在使用过程中就一直活着
            死亡：当对象长时间不用的时候，且没有被别的对象引用时，由java垃圾回收器回收


-----------------------------------------------------------------------------------------------------------
spring_04_Demo
一、spring中的依赖注入
    ·依赖注入：Denpendency Injection
    ·IOC的作用：降低程序间的耦合（依赖关系）
    ·依赖关系的管理：交给spring来维护
    ·在当前类需要用到其他类的对象，由spring为我们提供，我们只要在配置文件里面说明
    ·依赖关系的维护：就称为依赖注入
    ·依赖注入：
        ·能注入的三种数据：
            ·基本数据类型和string
            ·其他bean类型（在配置文件中或者注解配置过的bean）
            ·复杂类型/集合类型
        ·三种注入的方式：
            ·1、使用构造函数提供  -使用constructor-arg标签
                标签的属性：
                    type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或者某些参数的类型
                    index：用于指定要注入的数据构造函数中指定索引位置的参数赋值
                    name：用于指定给构造函数中指定名称的参数赋值
                    value：用于基本类型和String类型的数据
                    ref：用于指定其他的bean类型，它指的是在spring中的ioc核心容器中出现过的bean对象
                优点：在获取bean对象的时候，注入的数据是必须（都要，有几个就要弄几个）的操作，否则对象无法创建成功
                缺点：改变了bean对象的实例化方式，使我们在创建对象的时候，如果用不到这些数据，也必须提供
            ·2、使用set方法提供---最常用
                涉及的标签：property
                出现的位置：bean标签的内部
                标签的属性
                    name：用于指定注入时所调用的setter方法名称
                    value：用于基本类型和String类型的数据
                    ref：用于指定其他的bean类型
                优点：创建对象时，没有明确的限制，可以直接使用默认构造函数
                缺点：如果某个成员必须有值，则获取对象时有可能set方法没有执行
            ·附加：复杂类型的注入/集合类型的注入
                用于给List结构集合注入的标签：list\array\set
                用于给Map结构集合中注入的标签：map、props
            ·3、使用注解提供

二、附加：
    1、<bean id="now" class="java.util.Date"></bean>的解释
    读取一个全限定类名（java.util.Date），反射创建一个对象，并将对象存入spring的核心容器中，可以通过这个id（now）取出来
    2、spring中的IOC的结构：MAP结构

三、课后反思：
    ·spring的ioc用来干嘛？解决什么问题？
    ·如何搭建spring的ioc基于xml的开发环境？
    ·如何实现类之间的依赖用spring的注入方式？
    ·用spring的ioc来尝试着修改程序？


---------------------------------------------------------------------------------------------------------------
spring_05_itheima_0402

一、基于注解的ioc配置
    ·以前在.Xml里面的写法如下：
        <bean id="accountService" class="com.itheima_0402.service.impl.AccountServiceImpl"
                scope="" init-method="" destroy-method="">
                <property name="" value="" ref=""></property>
        </bean>

    ·1、用于创建对象的：
        他们的作用和xml文件中编写一个bean标签实现的功能是一样的
        @Component:
            作用：用于把当前类对象存入spring容器中
            属性：
                value：用于指定bean的id,当我们不写的时候，它的默认值是当前类名，且首字母改小写
        @Controller:（用在表现层）
        @Service:（用在业务层）
        @Repository:（用在持久层）
        以上三个注解的作用和Component是一摸一样的，他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰

    ·2、用于注入数据的
        他们的作用就和在xml文件中的bean标中的一个property标签的作用是一样的
        @Autowired:
            作用：自动按照类型注入，只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功！
                 如果ioc容器中有没有任何bean的类型和要注入的变量类型，那就会报错
                 当有多个匹配的时候，要注入的变量民称和某个bean名称一样的话，也可以注入
            出现的位置：可以是变量上，也可以是方法上
            细节：在使用注解注入的时候，setter方法不是必须的了
        @Qualifier:
            作用：在按照类型注入的基础之上，再按照名称注入，它在给类成员注入时不能单独使用，但是在给方法参数注入的时候可以
            属性：
                value:用于指定bean的id
        @Resource:(替换上面两个)
            作用：直接按照bean的id注入，它可以独立使用
            属性：
                name：用于指定bean的id
        以上三个注入只能注入其他bean类型的数据，而基本数据类型无法使用上述注解实现

        @Value：
            作用：用于基本数据类型和String类型的数据
            属性：
                value：用于指定数据的值，它可以使用spring中SpEl（也就是spring的el表达式）
                       SpEl的写法：${表达式}

    ·3、用于改变作用范围的
        他们的作用就和在bean标签中使用scope属性实现的功能是一样的
        @Scope：
            作用：用于指定的bean的作用范围
            属性：
                value：指定范围的取值。常用取值：singleton prototype

    ·4、和生命周期相关的
        他们的作用就和在bean标签中使用init-method和destory-method的作用是一样的
        @PreDestroy：
            作用：用于指定销毁方法
        @PostConstruct：
            作用：用于指定初始化方法
二、
三、
